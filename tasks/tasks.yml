- name: Install Nginx
  package:
    name: nginx-extras
    state: present

- name: Create directories
  file:
    path: "{{ nginx_path }}/{{ item }}"
    state: directory
  loop:
    - auth
    - conf.d
    - scripts

- name: Copy files
  copy:
    src: www/dhparam.pem
    dest: "{{ nginx_path }}/dhparam.pem"
  notify: Restart Nginx

- name: Template configuration
  template:
    src: nginx.conf.j2
    dest: "{{ nginx_path }}/nginx.conf"
  notify: Restart Nginx

- name: Template scripts
  template:
    src: "{{ item }}.j2"
    dest: "{{ nginx_path }}/scripts/{{ item }}"
    mode: "755"
  loop:
    - reload.sh

- name: Template auth list
  template:
    src: auth.conf.j2
    dest: "{{ nginx_path }}/auth/{{ item.name }}"
  loop: "{{ nginx.auth_lists | default([]) }}"

- name: Clear auth lists
  block:
    - name: Get list of auth lists
      find:
        paths: "{{ nginx_path }}/auth"
      register: remote_auth

    - name: Remove unnecessary auth lists
      file:
        path: "{{ item }}"
        state: absent
      when: item | basename not in nginx.auth_lists | map(attribute='name')
      loop: "{{ remote_auth.files | map(attribute='path') }}"

- name: Create hosts
  block:
    - name: Template host configuration
      template:
        src: host.conf.j2
        dest: "{{ nginx_path }}/conf.d/{{ item.primary }}.conf"
      when: "'link' not in item"
      loop: "{{ nginx.hosts }}"
      notify: Restart Nginx

    - name: Create links to host configuration
      file:
        src: "{{ item.link }}"
        path: "{{ nginx_path }}/conf.d/{{ item.primary }}.conf"
        state: link
        force: yes
      when: "'link' in item"
      loop: "{{ nginx.hosts }}"
      notify: Restart Nginx

    - name: Check for local files
      local_action: stat path=www/{{ item.primary }}
      loop: "{{ nginx.hosts }}"
      register: local_www
      become: no

    - name: Copy static files if exists
      copy:
        src: www/{{ item.primary }}
        dest: "/var/www/"
      when: "'root' not in item and local_www.results[index].stat.exists"
      loop: "{{ nginx.hosts }}"
      loop_control:
        index_var: index

    - name: Ensure remote directory exists
      file:
        path: "/var/www/{{ item.primary }}"
        state: directory
      when: "'root' not in item and 'link' not in item and not local_www.results[index].stat.exists"
      loop: "{{ nginx.hosts }}"
      loop_control:
        index_var: index

- name: Clear hosts
  block:
    - name: Get list of configuration files
      find:
        paths: "{{ nginx_path }}/conf.d"
        file_type: any
      register: remote_conf

    - name: Remove unnecessary configuration files
      file:
        path: "{{ item }}"
        state: absent
      when: item | basename not in nginx.hosts | map(attribute='primary') | product(['.conf']) | map('join')
      loop: "{{ remote_conf.files | map(attribute='path') }}"
      notify: Restart Nginx

- name: Install additional tools
  package:
    name:
      - apache2-utils
      - ssl-cert
    state: present

- name: Enable Nginx
  service:
    name: nginx
    enabled: yes
