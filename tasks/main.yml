- name: Create directories
  file:
    path: "{{ nginx_path }}/{{ item }}"
    state: directory
    owner: "{{ account.user }}"
    group: "{{ account.user }}"
  loop:
    - auth
    - conf.d
    - scripts
    - ssl
    - www
  become: yes

- name: Copy files
  copy:
    src: "{{ item.src }}"
    dest: "{{ nginx_path }}/{{ item.dest }}"
  loop:
    - src: www/dhparam.pem
      dest: ssl/dhparam.pem
  notify: Restart Nginx

- name: Template configuration
  template:
    src: "{{ item }}.j2"
    dest: "{{ nginx_path }}/{{ item }}"
  loop:
    - docker-compose.yml
    - nginx.conf
  notify: Restart Nginx

- name: Template scripts
  template:
    src: "{{ item }}.j2"
    dest: "{{ nginx_path }}/scripts/{{ item }}"
    mode: "755"
  loop:
    - reload.sh

- name: Template auth list
  template:
    src: auth.conf.j2
    dest: "{{ nginx_path }}/auth/{{ item.name }}"
  loop: "{{ auth_lists | default([]) }}"

- name: Clear auth lists
  block:
    - name: Get list of auth lists
      find:
        paths: "{{ nginx_path }}/auth"
      register: remote_auth

    - name: Remove unnecessary auth lists
      file:
        path: "{{ item }}"
        state: absent
      when: item | basename not in auth_lists | map(attribute='name')
      loop: "{{ remote_auth.files | map(attribute='path') }}"

- name: Create hosts
  block:
    - name: Template host configuration
      template:
        src: host.conf.j2
        dest: "{{ nginx_path }}/conf.d/{{ item.primary }}.conf"
      loop: "{{ hosts }}"
      notify: Restart Nginx

    - name: Check for local files
      local_action: stat path=www/{{ item.primary }}
      loop: "{{ hosts }}"
      register: local_www

    - name: Copy static files if exists
      copy:
        src: www/{{ item.primary }}
        dest: "{{ nginx_path }}/www/"
      when: "'root' not in item and local_www.results[index].stat.exists"
      loop: "{{ hosts }}"
      loop_control:
        index_var: index

    - name: Ensure remote directory exists
      file:
        path: "{{ nginx_path }}/www/{{ item.primary }}"
        state: directory
      when: "'root' not in item and not local_www.results[index].stat.exists"
      loop: "{{ hosts }}"
      loop_control:
        index_var: index

- name: Clear hosts
  block:
    - name: Get list of configuration files
      find:
        paths: "{{ nginx_path }}/conf.d"
      register: remote_conf

    - name: Remove unnecessary configuration files
      file:
        path: "{{ item }}"
        state: absent
      when: item | basename not in hosts | map(attribute='primary') | product(['.conf']) | map('join')
      loop: "{{ remote_conf.files | map(attribute='path') }}"
      notify: Restart Nginx

- name: Install additional tools
  package:
    name: apache2-utils
    state: present
  become: yes

- name: Start Nginx
  community.general.docker_compose:
    project_src: "{{ nginx_path }}"
    state: present
  become: yes
